import logging
import aiohttp
from aiogram import Router, types
from aiogram.filters import ChatMemberUpdatedFilter, IS_ADMIN, IS_MEMBER, ADMINISTRATOR
from aiogram.types import ChatMemberUpdated

group_router = Router()


@group_router.chat_member(ChatMemberUpdatedFilter(
    member_status_changed=(IS_MEMBER | IS_ADMIN | ADMINISTRATOR)
))
async def on_bot_added_to_group(event: ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    if event.new_chat_member.user.id == event.bot.id:
        group_id = str(event.chat.id)
        group_name = event.chat.title or "Unknown Group"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id —Ç–æ–≥–æ, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞
        user_id = "unknown"
        if event.from_user:
            user_id = str(event.from_user.id)
        else:
            # –ï—Å–ª–∏ from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            try:
                admins = await event.bot.get_chat_administrators(group_id)
                if admins:
                    user_id = str(admins[0].user.id)
            except Exception as e:
                logging.error(f"Error getting admins: {e}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        payload = {
            "group_id": group_id,
            "user_id": user_id,
            "group_name": group_name
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        url = "https://192.168.52.48:9002/bot/session"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                        url,
                        json=payload,
                        ssl=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                ) as response:

                    if response.status == 200:
                        logging.info(f"‚úÖ Session created for group {group_id}")
                    else:
                        error_text = await response.text()
                        logging.error(f"‚ö†Ô∏è Session creation failed: {response.status} - {error_text}")

        except Exception as e:
            logging.exception(f"üî• Error sending session data: {e}")