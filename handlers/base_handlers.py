#handlers/base_handlers
import logging
from aiogram import types, F, Router
from aiogram.enums import ChatType

from parsers.message_parser import parse_update_to_message_dto, parse_message_to_dto
from services.message_service import send_message_to_service

base_router = Router()


@base_router.message()
async def handle_all_messages(message: types.Message):
    try:
        print(f"\n‚ö° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text if message.text else message}")

        # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DTO
        try:
            message_dto = parse_message_to_dto(message)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –≤ DTO: {message_dto}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            logging.error(f"Parsing error: {str(e)}")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        spam_flag = await send_message_to_service(message_dto, message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞–º–∞
        if spam_flag == 2:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
            if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
                try:
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏ —Å—Ä–∞–∑—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è)
                    await message.chat.ban(user_id=message.from_user.id)
                    await message.chat.unban(user_id=message.from_user.id)
                    await message.answer(
                        f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É–¥–∞–ª–µ–Ω –∑–∞ —Å–ø–∞–º!"
                    )
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return True  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

        elif spam_flag == 1:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            await message.reply("‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ!")
            print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {message.from_user.id}")
            return True  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logging.exception(f"Error in handle_all_messages: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ) - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã
@base_router.message(F.text & ~F.text.startswith('/'))
async def echo_message(message: types.Message):
    print(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    await message.answer(f"–¢—ã —Å–∫–∞–∑–∞–ª: {message.text}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@base_router.message(F.text.startswith('/'))
async def unknown_commands(message: types.Message):
    print(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {message.text}")
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π /help")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@base_router.message(F.content_type != 'text')
async def non_text_messages(message: types.Message):
    print(f"üñº –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    await message.reply("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º!")


@base_router.errors()
async def errors_handler(update: types.Update, exception: Exception):
    error_msg = f"üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {update}: {exception}"
    print(error_msg)
    logging.exception(error_msg)
    return True